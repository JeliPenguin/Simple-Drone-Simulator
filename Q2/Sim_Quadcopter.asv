% Differential drive robot
clc;
clear all;
close all;

% Simulation parameters
TOTAL_TIME  = 20;
dt          = 0.1;
TIME_SCALE  = 1; % slows down simulation if > 1, speeds up if < 1 (and if computation allows...)


% Initialise plot
figure;
ax1 = axes;
hold(ax1,'on');
view(ax1, 3);
axis('equal')
axis([-5 5 -5 5 0 5])
axis('manual')
xlabel('x');
ylabel('y');
ylabel('z');
axis vis3d
grid ON
grid MINOR
ax1.Toolbar.Visible = 'off';
ax1.Interactions = [];

% Initialise Simulation
drone1 = Quadcopter(ax1);
% 
% % 1. In equilibrium:
% input = [0.735,0.735,0.735,0.735];

% % 2. Free Falling
% input = zeros(4,1);

% 3. Rotation at constant altitude
fst = 0.1;
snd = 1.47 - fst;
input = [snd,fst,snd,fst];
% input=[0.1,0.5,0.2,2.14];

m = 0.3;
g = 9.8;
p = [0;0;2];
A = [0,0,0,1,0,0,0,0,0,0,0,0
    ]
pdot = zeros(3,1);
theta=zeros(3,1);
thetadot = zeros(3,1);

% Run Simulation
for t = 0:dt:TOTAL_TIME
    tic
    cla
    
    % _______ IMPLEMENT CONTROLLER + SIMULATION PHYSICS HERE ______ %

    omega = thetadot2omega(thetadot,theta);
    a = acceleration(input,theta,pdot,m,g,k,kd);
    omegadot = angular_acceleration(input,omega,I,L,b,k);
    omega = omega+dt*omegadot;
    thetadot=omega2thetadot(omega,theta);
    theta=theta+dt*thetadot;
    pdot=pdot+dt*a;
    % disp([a,pdot,p])
    p=p+dt*pdot;
    omegaFlip=flip(omega);
    % disp(omega)

    drone1.update(p,omegaFlip);
    drone1.plot;
    % _______ IMPLEMENT CONTROLLER + SIMULATION PHYSICS HERE ______ %
    
    
    drawnow nocallbacks limitrate
    pause(TIME_SCALE*dt-toc); 
end